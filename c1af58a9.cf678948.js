(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{73:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return c}));var n=a(2),r=a(6),i=(a(0),a(83)),b={title:"Test Case Template",sidebar_label:"Test Case Template"},l={unversionedId:"testcases/template-tc",id:"testcases/template-tc",isDocsHomePage:!1,title:"Test Case Template",description:"The ITP test cases are defined using YAML files. Each file is composed of",source:"@site/docs/testcases/template-tc.md",slug:"/testcases/template-tc",permalink:"/testcases/template-tc",version:"current",sidebar_label:"Test Case Template",sidebar:"someSidebar",previous:{title:"ITP Test Cases",permalink:"/testcases/tclist"},next:{title:"Creating Test Case",permalink:"/testcases/creating-tc"}},s=[{value:"Test Case Information",id:"test-case-information",children:[{value:"Test Case Components",id:"test-case-components",children:[]}]},{value:"Test Steps",id:"test-steps",children:[{value:"Assertions (<code>test_request_scripts</code> and <code>test_response_scripts</code>)",id:"assertions-test_request_scripts-and-test_response_scripts",children:[]},{value:"Request and Response Templates",id:"request-and-response-templates",children:[]},{value:"JWS Signatures",id:"jws-signatures",children:[]}]},{value:"Repeating Requests",id:"repeating-requests",children:[]},{value:"Template variables",id:"template-variables",children:[]}],o={rightToc:s};function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ITP test cases are defined using YAML files. Each file is composed of\nseveral fields which define both the validations to perform during a test as\nwell as the behaviour of any simulated components. This page describes the basic\nstructure of a YAML file for the test platform."),Object(i.b)("h2",{id:"test-case-information"},"Test Case Information"),Object(i.b)("p",null,"Every test case YAML file begins with the same basic information. Six fields are\nused as a header to specify particular characteristics related to the test case\nand the use case it belongs to. Below you can see a table with the fields used\nin the header and an example of the test case data in a YAML file."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"name")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The name of the Test Case that will be shown to users."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"Authorized Transaction by Payer FSP"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"slug")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A unique name for the test case, used internally."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"authorized-transaction"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"use_case")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The name of the Use Case that the test case case is related to. This should be identical for all Test Cases sharing a Use Case."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"behavior")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),'Defines the type of the Test Case, i.e. "Happy flow" (',Object(i.b)("inlineCode",{parentName:"td"},"positive"),') and "Unhappy flow" (',Object(i.b)("inlineCode",{parentName:"td"},"negative"),")."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"positive")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"negative"))))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"description")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A description of the Test Case. It is useful to include some business background of what we are trying to achieve in this case."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The Service Provider wants to test if he is capable of receiving a transaction from a different wallet...")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"precondition")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"An additional area describing specific values that should be used to execute a Test Case. This may include directions for using test case ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"triggers"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("h4",{id:"example-of-test-case-information-in-a-yaml-file"},"Example of test case information in a YAML file"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'name: Authorized Transaction by Payer FSP\nslug: authorized-transaction\nuse_case: Merchant-Initiated Merchant Payment\nbehavior: positive\ndescription: |\n  The Service Provider wants to test if he is capable of receiving a\n  transaction from a different wallet provider than the one with which he has\n  an account. In this case, we simulate the scenario when the Payer would\n  like to buy goods or services from a Service Provider (the Payee), but each\n  of them uses different wallet providers. This flow shows the necessary\n  steps for this transaction simulating an approved transaction.\nprecondition: |\n  - Service Provider has GSMA Mobile Money API Implemented.\n  - Service Provider is capable of handling async calls.\n  - Payee and Payer MMOs exist in Mojaloop as Participants.\n  - Payee and Payer exist in Mojaloop as Parties.\n  - Amount should be the value "1001".\n  - Debit party should be identified by account identifier "msisdn" with the value "+33555123456".\n  - Credit party should be identified by account identifier "msisdn" with the value "+33555789123".\n')),Object(i.b)("h3",{id:"test-case-components"},"Test Case Components"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"components")," field defines the components which are used in the test case.\nEach component is defined by:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"name")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The readable name of the component that will be shown to users."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"Service Provider"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"slug")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A short unique name for the component, which will be used elsewhere in the file and in ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"../architecture/connections"}),"component URLs"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"sp"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"versions")," (optional)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The versions of a component for which this test case should be used."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"[v1, v2]"))))),Object(i.b)("p",null,"Although the name, slug and versions field are free to be any values, it is\ngenerally a good idea to keep the values consistent across multiple test cases.\nThis ensures that identical components are correctly grouped in component\ndiagrams, for example."),Object(i.b)("p",null,"Component versions can be useful in the situation that the test platform wants\nto test multiple versions of a component at once. For example, one may wish to\ntest a behaviour which exists in ",Object(i.b)("inlineCode",{parentName:"p"},"v1")," of a system, but is deprecated in ",Object(i.b)("inlineCode",{parentName:"p"},"v2")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"v3"),". In this case, two test cases should be created - with the version field\nset appropriately in both. If the behaviour examined by a test case does not\ndiffer based on component versions, then the version field may be omitted, and\nthe test case will be used for any component version."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"# ... test case information\ncomponents:\n  - name: Service Provider\n    slug: service-provider\n    versions:\n      - v2\n      - v3\n  - name: Mojaloop\n    slug: mojaloop\n  - name: Mobile Money Operator 1\n    slug: mmo1\n  - name: Mobile Money Operator 2\n    slug: mmo2\n")),Object(i.b)("h2",{id:"test-steps"},"Test Steps"),Object(i.b)("p",null,"The remainder of the test case file is made up of a list of ",Object(i.b)("em",{parentName:"p"},"test steps"),". Each\nstep represents an HTTP request made as part of the test, and is defined by the\nfollowing values:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"source")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The sender of the request. Should be a slug from the ",Object(i.b)("inlineCode",{parentName:"td"},"components")," section of the test case. Will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match incoming requests")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"sp")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"mmo-1")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"target")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The recipient of the request. Should be a slug from the ",Object(i.b)("inlineCode",{parentName:"td"},"components")," section of the test case. Will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match incoming requests")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"sp")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"mmo-1")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"method")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The request method that will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match incoming requests"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"POST")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"PUT")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"pattern")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A regular expression that will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match incoming requests")," using the request path."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"^transactionRequests\\$")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"^quotes/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\\$")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"trigger")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A JSON value that will be compared against incoming request bodies for ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"matching"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"{amount: '99'}")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"api_spec")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The API spec to perform automated schema validation. Should be a specification name from the database."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,"Mojaloop v1.0"),Object(i.b)("li",null,"MM v1.1.2"),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"path")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A path defined inside the API spec, which is used to lookup schema validation rules. Also used as a label for the step."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"/quotes/{ID}")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"/transactionRequests")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"mtls")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A boolean indicating whether an mTLS connection is required to execute this test step"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"true")," or ",Object(i.b)("inlineCode",{parentName:"td"},"false"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"test_request_scripts")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of business rule assertions that will be performed on the request."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("em",{parentName:"td"},"see below"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"test_response_scripts")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of business rule assertions that will be performed on the HTTP response."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("em",{parentName:"td"},"see below"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"request")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A template HTTP request which will be used to generate test requests from a simulator."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("em",{parentName:"td"},"see below"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"response")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A template HTTP response which will be used to generate test responses from a simulator."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("em",{parentName:"td"},"see below"))))),Object(i.b)("h4",{id:"example-of-test-steps"},"Example of test steps"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'test_steps:\n  # Step 1. Mobile Money Operator 2 -> Mojaloop\n  - source: mmo-2\n    target: mojaloop\n    method: PUT\n    pattern: "^quotes/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"\n    trigger:\n      transferAmount:\n        amount: "99"\n    api_spec: Mojaloop v1.0\n    path: /quotes/{ID}\n    test_request_scripts: # ...\n    test_response_scripts: # ...\n    request: # ...\n    response: # ...\n\n  # Step 2. Mobile Money Operator 1 -> Mojaloop\n  - source: mmo-1\n    target: mojaloop\n    method: PUT\n    pattern: "^quotes/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"\n    trigger:\n      transferAmount:\n        amount: "99"\n    api_spec: Mojaloop v1.0\n    path: /quotes/{ID}\n    test_request_scripts: # ...\n    test_response_scripts: # ...\n    request: # ...\n    response: # ...\n\n\n  # ...\n')),Object(i.b)("h3",{id:"assertions-test_request_scripts-and-test_response_scripts"},"Assertions (",Object(i.b)("inlineCode",{parentName:"h3"},"test_request_scripts")," and ",Object(i.b)("inlineCode",{parentName:"h3"},"test_response_scripts"),")"),Object(i.b)("p",null,"Assertions are used to validate that certain business conditions hold in a more\npowerful way than is possible using API schema validation. Where API schema\nvalidation can only validate the ",Object(i.b)("em",{parentName:"p"},"structure")," of a message, assertions can be\nused to validate the ",Object(i.b)("em",{parentName:"p"},"content"),". Assertions can be performed for any value in the\nheader, body or uri of the request or response. In a response, the ",Object(i.b)("inlineCode",{parentName:"p"},"status"),"\nfield may also be used for assertions."),Object(i.b)("p",null,"Each request/response may have a number of assertions, and each assertion is\ndefined by a ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and a list of Laravel validation ",Object(i.b)("inlineCode",{parentName:"p"},"rules"),". The key for each\nrule is a path to a field using 'dot' syntax within the request/response object.\nFor more information on the syntax of these rules, visit the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://laravel.com/docs/7.x/validation#available-validataion-rules"}),"Laravel documentation site"),"."),Object(i.b)("p",null,"In addition to the builtin Laravel validation rules, ITP defines a number of\ncustom validators targeting ILP Packets:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpPacketAmount"),": Validates that the ILP packet contains the specified\namount. If no value is provided, the ",Object(i.b)("inlineCode",{parentName:"li"},"body.amount")," field is used as a default."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpPacketExpiration"),": Validates that the ILP packet contains the specified\nexpiration date. If no value is provided, the ",Object(i.b)("inlineCode",{parentName:"li"},"body.expiration")," field is used\nas a default."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpPacketCondition"),": Validates that the ILP packet contains the specified\ncondition field. If no value is provided, the ",Object(i.b)("inlineCode",{parentName:"li"},"body.condition")," field is used\nas a default."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpPacketDestination"),": Validates that the ILP packet contains the specified\ndestination.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'test_request_scripts:\n  - name: Amounts and currencies are specified correctly\n    rules:\n      body.transferAmount.amount: "required|in:99"\n      body.transferAmount.currency: "required|regex:/^[A-Z]{3}/"\n      body.payeeReceiveAmount.amount: "required|in:100"\n      body.payeeReceiveAmount.currency: "required|regex:/^[A-Z]{3}/"\n      body.payeeFspCommission.amount: "required|in:1"\n      body.payeeFspCommission.currency: "required|regex:/^[A-Z]{3}/"\n  - name: ILP Packet is well-formed\n    rules:\n      body.ilpPacket:\n        - "required"\n        - "regex:/^[A-Za-z0-9-_]+[=]{0,2}$/"\n        - "ilpPacketAmount:99"\n        - "ilpPacketDestination:g.gh.msisdn.{{ env.PHONE }}"\n        - "ilpPacketCondition"\n        - "ilpPacketExpiration"\n  - name: Callback URL is specified\n    rules:\n      headers.x-callback-url.*: "required|url"\ntest_response_scripts:\n  - name: Transaction was successfully accepted\n    rules:\n      status: "required|in:200"\n')),Object(i.b)("h3",{id:"request-and-response-templates"},"Request and Response Templates"),Object(i.b)("p",null,"Each test step is also defined by a template request and response. This is used\nby the platform to generate simulated traffic for the components which are not\nSUTs in a session. Additionally, the templates also provide documentation for\ntest platform users, to outline which data needs to be sent, or can be expected\nfrom other components during test execution."),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"request")," template is composed of the following fields:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"method"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The HTTP method used to make the request."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"GET"),", ",Object(i.b)("inlineCode",{parentName:"td"},"POST"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"uri"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A path or URI used to make the request."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"/quotes"),", ",Object(i.b)("inlineCode",{parentName:"td"},"/parties/{{ env.PARTY }}"))))),Object(i.b)("p",null,"The following fields may be used in both a ",Object(i.b)("inlineCode",{parentName:"p"},"request")," or ",Object(i.b)("inlineCode",{parentName:"p"},"response")," template:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"headers"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of headers to include in the request or response."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},'[accept: "application/json"]'))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"body"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A JSON payload for the request or response."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},'{amount: "1005", currency: "USD", ...}'))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"delay"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"How many seconds the simulator should delay before sending the request or response."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"5"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"jws"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Configuration options for verifying and generating JWS signature headers."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("p",null,"Finally, the following fields may only be used in a ",Object(i.b)("inlineCode",{parentName:"p"},"response")," template:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"status"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The status code that will be used for a response."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"200"))))),Object(i.b)("h4",{id:"example-of-a-request-and-response"},"Example of a request and response"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'test_steps:\n  - #...\n    request:\n      method: POST\n      uri: /transactions\n      headers:\n        accept: "application/json"\n        content-type: "application/json"\n        x-callback-url: "https://example.com/example"\n        x-date: "2000-01-01T00:00:00.000Z"\n      body:\n        amount: "1005"\n        currency: "USD"\n        type: "merchantpay"\n        debitParty:\n          - key: "msisdn"\n            value: "+33555123456"\n        creditParty:\n          - key: "msisdn"\n            value: "+33555789123"\n    response:\n      status: 400\n      headers:\n        x-date: "2000-01-01T00:00:00.000Z"\n        content-type: "application/json"\n')),Object(i.b)("h3",{id:"jws-signatures"},"JWS Signatures"),Object(i.b)("p",null,"The Interoperability Test Platform supports generation of JWS signatures by\nsimulators, and verification of JWS signatures sent by SUTs. Both are controlled\nby adding a ",Object(i.b)("inlineCode",{parentName:"p"},"jws")," key to a test step request or response. The ",Object(i.b)("inlineCode",{parentName:"p"},"jws"),'\nconfiguration object includes two files which should be uploaded to the session\nenvironment when the test case is executed - one for the public key (used to\nvalidate the JWS signature) and one for the private key (used to generate the\nJWS signature in simulators). Any normal environment variable may be used for\nthese fields (see "Template Variables" below).'),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"alg")," (optional)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The JWS algorithm to use. Available values are ",Object(i.b)("inlineCode",{parentName:"td"},"RS256")," (default), ",Object(i.b)("inlineCode",{parentName:"td"},"RS384"),", ",Object(i.b)("inlineCode",{parentName:"td"},"RS512"),", ",Object(i.b)("inlineCode",{parentName:"td"},"HS256"),", ",Object(i.b)("inlineCode",{parentName:"td"},"HS384"),", ",Object(i.b)("inlineCode",{parentName:"td"},"HS512"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"key")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The private key used to generate a JWS signature")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"public_key")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The public key used to validate a JWS signature")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"protectedHeaders")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The request/response headers which will be included in the JWS signature")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"header")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The name of the header which will contain the JWS signature")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"transform")," (optional)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The name of an additional transformation to apply to the signature. The only available value currently is ",Object(i.b)("inlineCode",{parentName:"td"},"mojaloop"),".")))),Object(i.b)("p",null,"The transform field exists because different implementations expect the JWS\nsignature in different formats. By default, the JWS signature will be directly\ninserted into the HTTP header. With the ",Object(i.b)("inlineCode",{parentName:"p"},"mojaloop")," transform enabled, the\nsignature will be wrapped in a JSON object along with a ",Object(i.b)("inlineCode",{parentName:"p"},"protectedHeaders"),"\nfield, and it is this object which is inserted into the HTTP header."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'test_steps:\n  - # ...\n    request:\n      # ...\n      jws:\n        alg: RS256\n        key: "{{ env.MMO_PRIVATE_KEY }}"\n        public_key: "{{ env.MMO_PUBLIC_KEY }}"\n        header: "FSPIOP-Signature"\n        transform: mojaloop\n        protectedHeaders:\n          - FSPIOP-URI\n          - FSPIOP-HTTP-Method\n          - FSPIOP-Source\n          - FSPIOP-Destination\n          - Date\n')),Object(i.b)("h2",{id:"repeating-requests"},"Repeating Requests"),Object(i.b)("p",null,'It is sometimes desirable to test scenarios where a particular step may be\nrepeated several times before proceeding. As an example, an API based on polling\nwould require a simulator to make several "poll" requests before the final\nanswer is provided. This can be achieved through the ',Object(i.b)("inlineCode",{parentName:"p"},"repeat")," parameter of a\ntest step. ",Object(i.b)("inlineCode",{parentName:"p"},"repeat")," is defined by the following parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"condition")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Responses returned to the platform will be compared against this condition. If the condition matches, the test run will repeat the request again")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"max")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The maximum number of times the repeat condition may hold before the test is considered a failure.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"response")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A sample intermediate response which will be used by a simulator before moving on to the next step")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"count")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The number of times a simulator should send the intermediate response before moving on to the next step")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"test_response_scripts")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optionally, you may specify some assertions to apply against the intermediate responses.")))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'- path: /get-status\n  pattern: "^get-status$"\n  method: GET\n  source: source-component\n  target: target-component\n  test_response_scripts:\n    - name: Transaction was successfully accepted\n      rules:\n        body.result: "SUCCESS"\n        status: "required|in:200"\n  request:\n    method: GET\n    uri: /get-status\n\n  # Final response, sent by a simulator after 2 occurrences\n  response:\n    status: 200\n    body:\n      result: "SUCCESS"\n\n  repeat:\n    # If a system responds to a simulated request with this body, we will repeat the request\n    condition:\n      body:\n        result: "PENDING"\n    # If the condition above holds more than 3 times, we will count it as a failure\n    max: 3\n    # Our simulator will send a "PENDING" response twice before sending "SUCCESS"\n    count: 2\n    response:\n      status: 202\n      body:\n        updatedTime: \'{{ "now" | date }}\'\n        result: "PENDING"\n    # We want to check that "PENDING" responses sent by a system are well-formed\n    test_response_scripts:\n      - name: Request was received\n        rules:\n          body.result: "required|in:PENDING"\n          status: "required|in:202"\n')),Object(i.b)("h2",{id:"template-variables"},"Template variables"),Object(i.b)("p",null,"It is often useful to include dynamic data within a test case. Some examples of\nthis are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To send a simulated request with a freshly generated UUID on each test run"),Object(i.b)("li",{parentName:"ul"},"To include a field in a HTTP response which was dynamically provided in a\npreceding request"),Object(i.b)("li",{parentName:"ul"},"To customise the test execution for a particular environment (e.g. to include\na valid MSISDN registered within the SUT taking part in the test)")),Object(i.b)("p",null,"Template variables are a way to achieve the above by injecting values inside any\nstring within the ",Object(i.b)("inlineCode",{parentName:"p"},"test_steps[*].request")," and ",Object(i.b)("inlineCode",{parentName:"p"},"test_steps[*].response")," objects.\nIn addition, variables may be used inside the ",Object(i.b)("inlineCode",{parentName:"p"},"rules")," field of\n",Object(i.b)("inlineCode",{parentName:"p"},"test_steps[*].test_request_scripts")," and ",Object(i.b)("inlineCode",{parentName:"p"},"test_steps[*].test_response_scripts"),"."),Object(i.b)("p",null,"The test platform uses the powerful templating language\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://twig.symfony.com/"}),"Twig")," to allow sandboxed execution of arbitrary\nlogic within the test case context. This allows us to create templates with\nhighly dynamic data - such as including data from previous messages, or\ncombining multiple sources of data using arithmetic. The syntax for Twig\ntemplate variables is ",Object(i.b)("inlineCode",{parentName:"p"},"{{ twig_expression }}"),"."),Object(i.b)("p",null,"A full description of the twig templating language is beyond the scope of this\ndocumentation, although a detailed reference is available on the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://twig.symfony.com/doc/3.x/"}),"Twig website"),"."),Object(i.b)("p",null,"Within a test case, the following context variables are available for use (in\naddition to all of Twig's built-in functions and variables):"),Object(i.b)("h4",{id:"env"},Object(i.b)("inlineCode",{parentName:"h4"},"env")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"env")," variable contains a reference to the variables defined within the\nsession when it is in execution. Two types of environment variable exist -\nstring variables and file variables. String variables will be replaced directly\ninside the twig template as strings, whereas file variables will be inserted as\na file path. File variables are useful for providing a reference to a public or\nprivate key in the ",Object(i.b)("inlineCode",{parentName:"p"},"jws")," field of a test step."),Object(i.b)("p",null,'Any legal Javascript variable name may be used for an environment variable, but\nthe convention is to use "UPPER_SNAKE_CASE". It is often useful to document the\nnames of any variables used within a test case in the test case preconditions,\nso that users of the test case can quickly verify that they have provided values\nfor all important variables to the test case.'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'body:\n  fromParty:\n    msisdn: "{{ env.MMO1_PARTY_MSISDN }}"\n  toParty:\n    msisdn: "{{ env.MMO2_PARTY_MSISDN }}"\n')),Object(i.b)("h4",{id:"steps"},Object(i.b)("inlineCode",{parentName:"h4"},"steps")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," variable contains a reference to all previously executed test steps\nin the test case. In the following example, we use ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," in combination with\ntwig's ability to perform arithmetic to simulate a constant fee of 1 USD being\napplied to the amount requested in a previous step:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'body:\n  transferAmount:\n    currency: "USD"\n    amount: "{{ steps.7.request.body.amount.amount + 1 }}"\n')),Object(i.b)("h4",{id:"uuidv4"},Object(i.b)("inlineCode",{parentName:"h4"},"uuidv4")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"uuidv4()")," function can be used to generate a unique UUID for a request. It\ncan be used in conjunction with ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," as described above to correlate a UUID\nacross several steps:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'request:\n  # ...\n  body:\n    serverCorrelationId: "{{ uuidv4() }}"\nresponse:\n  # ...\n  body:\n    requestId: "{{ steps.4.request.body.serverCorrelationId }}"\n')),Object(i.b)("h4",{id:"now"},Object(i.b)("inlineCode",{parentName:"h4"},'"now"')),Object(i.b)("p",null,"Parsing date-like strings such as ",Object(i.b)("inlineCode",{parentName:"p"},'"now"')," is a builtin feature of Twig, but it\nis documented here separately as a useful tool in building test cases. Using\nTwig filters, you can format a date using any format string:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'headers:\n  X-Date: \'{{ "now" | date("F j, Y, g:i a") }}\'\n  X-Future-Date: \'{{ "+1 hour" | date("F j, Y, g:i a") }}\'\n')),Object(i.b)("h4",{id:"mapped_urls"},Object(i.b)("inlineCode",{parentName:"h4"},"mapped_urls")),Object(i.b)("p",null,"It is sometimes useful to be able to refer to a component by URL in a test\ncase - for example to generate a dynamic callback URL. This can be achieved with\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"mapped_urls")," variable. These will contain the same URLs that are displayed\nto the user during the session creation wizard."),Object(i.b)("p",null,"The format is ",Object(i.b)("inlineCode",{parentName:"p"},'mapped_urls["from-component-slug"]["to-component-slug"]'),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'headers:\n  X-Callback-URL: \'{{ mapped_urls["mmo1"]["sp"] }}/callback\'\n  # If a slug is alphanumeric, it is possible to use dot syntax instead:\n  X-Error-Callback-URL: "{{ mapped_urls.mmo1.sp }}/error"\n')),Object(i.b)("h4",{id:"ilp-functions"},"ILP Functions"),Object(i.b)("p",null,"In order to generate ILP variables, the following functions have been defined:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpFulfilment()"),": Generates a value for the ILP fulfilment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpCondition( fulfilment )"),": Generates a condition based on a fulfilment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ilpPacket( amount, expires, condition, destination, data)"),": Generates an ILP\npacket"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"base64_urlencode"),": Applies a base64_url encoding"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"base64_urldecode"),": Decodes a base64_url encoded string")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),'  body:\n    condition: \'{{ ilpCondition(ilpFulfilment())  | base64_urlencode }}\'\n    expiration: \'{{ "+1 hour" | date("Y-m-d\\\\TH:i:s.vP")}}\'\n    ilpPacket: \'{{\n        ilpPacket(\n          steps.6.request.body.amount.amount,\n          "+1 hour",\n          ilpCondition(ilpFulfilment()),\n          "g.gh.msisdn.#{steps.6.request.body.payee.partyIdInfo.partyIdentifier}",\n          ""\n        ) | base64_urlencode\n      }}\'\n')))}c.isMDXComponent=!0},83:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),c=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,b=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,u=p["".concat(b,".").concat(m)]||p[m]||d[m]||i;return a?r.a.createElement(u,l(l({ref:t},o),{},{components:a})):r.a.createElement(u,l({ref:t},o))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,b=new Array(i);b[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,b[1]=l;for(var o=2;o<i;o++)b[o]=a[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
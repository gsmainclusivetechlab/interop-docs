(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{147:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return h}));var n=a(2),r=a(9),i=(a(0),a(179)),o=a(200),s={id:"overview",title:"Overview",sidebar_label:"Overview"},l={id:"architecture/overview",title:"Overview",description:"This section describes the high-level architecture of the Interoperability Test",source:"@site/docs/architecture/overview.mdx",permalink:"/architecture/overview",editUrl:"https://github.com/gsmainclusivetechlab/interop-docs/blob/develop/docs/architecture/overview.mdx",sidebar_label:"Overview",sidebar:"someSidebar",previous:{title:"How to Use this Documentation",permalink:"/docsguide"},next:{title:"Connections between Components",permalink:"/architecture/connections"}},c=[{value:"Core Test Platform",id:"core-test-platform",children:[{value:"Frontend",id:"frontend",children:[]},{value:"Backend",id:"backend",children:[]},{value:"Test Manager",id:"test-manager",children:[]},{value:"Proxy",id:"proxy",children:[]}]},{value:"Simulators",id:"simulators",children:[{value:"Service Provider Simulator",id:"service-provider-simulator",children:[]},{value:"Mobile Money Operator 1",id:"mobile-money-operator-1",children:[]},{value:"Mobile Money Operator 2",id:"mobile-money-operator-2",children:[]},{value:"Mojaloop",id:"mojaloop",children:[]}]},{value:"System Under Test",id:"system-under-test",children:[]}],b={rightToc:c};function h(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This section describes the high-level architecture of the Interoperability Test\nPlatform. The platform was designed to be scalable and integrate with novel\nsimulators in future, and so it was designed around a flexible architecture\nconsisting of three sections:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Core Test Platform"),Object(i.b)("li",{parentName:"ul"},"Simulators"),Object(i.b)("li",{parentName:"ul"},"Systems Under Test (SUTs)")),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/img/architecture_high_level.png",alt:"High Level Architecture"}))),Object(i.b)("h2",{id:"core-test-platform"},"Core Test Platform"),Object(i.b)("p",null,"The core test platform provides an interface to manage users, sessions and test\ncases, and intercepts and validates every message between simulators and SUTs.\nThe platform uses ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://laravel.com/"}),"Laravel"),", a web application framework\nbuilt with PHP. The test platform can be further subdivided into four main\nblocks: Frontend, Backend, Test Manager and Proxy."),Object(i.b)("h3",{id:"frontend"},"Frontend"),Object(i.b)("p",null,"The frontend is responsible for rendering the user interface and uses two main\ntechnologies: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://vuejs.org/"}),"Vue.js")," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://tabler.io/"}),"Tabler"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Vue.js: Used to build a single page application."),Object(i.b)("li",{parentName:"ul"},"Tabler: Provides the admin and dashboard layout to build the UI, using\n",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://getbootstrap.com/"}),"Bootstrap")," internally.")),Object(i.b)("h3",{id:"backend"},"Backend"),Object(i.b)("p",null,"The backend is responsible for providing data to the Frontend, and interacts\nwith the database. In addition to Laravel, the backend uses\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://inertiajs.com/"}),"Inertia.js")," to allow the creation of a single page\napplication without the need for a dedicated API."),Object(i.b)("h3",{id:"test-manager"},"Test Manager"),Object(i.b)("p",null,"This is the core of the test platform, containing test case management, test\nrunners and validators. The test manager supports 2 types of validation: Schema\nvalidation and Business Rule validations (more details ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:""}),"here"),"). Business rule\nvalidations are controlled by custom logic defined within the test case\nspecification, while schema validation is powered by the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/thephpleague/openapi-psr7-validator"}),"OpenAPI PSR-7 Message Validator"),",\nwhich leverages the power of OpenAPI specifications to automatically validate\nall messages (requests & responses) within the platform."),Object(i.b)("h3",{id:"proxy"},"Proxy"),Object(i.b)("p",null,"In order to provide an end-to-end test, the platform must be able to follow all\nmessages exchanged between entities. The proxy layer was created for this\npurpose. All messages within the system pass through this proxy layer where the\nplatform is able to store and validate messages before forwarding them to the\ncorrect simulator, and subsequently validate the response."),Object(i.b)("p",null,"This diagram illustrates communication through the proxy layer. More details\nabout these connections are avalable ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/architecture/connections"}),"here"),"."),Object(i.b)(o.a,{options:{width:"100%",height:"auto"},dot:'\n    digraph {\n      node [ fontname="var(--ifm-font-family)", shape="box", margin=0.3, penwidth=2];\n      edge [ fontname="var(--ifm-font-family)", penwidth=2];\n      rankdir="TD"\n      ratio="fill";\n      size="3,1";\n      simulator1 [ label="Simulator 1"]\n      sut [ label="System \nUnder Test"]\n      simulator2 [ label="Simulator 2"]\n      simulatorN [ label="Simulator N"]\n      ITP [ label="Test Platform"]\n      subgraph sim {\n        rank="same"\n        simulator1 -> sut -> simulator2 -> simulatorN -> simulator2 -> sut -> simulator1[ style="dashed"]\n      }\n      ITP -> {simulator1 sut simulator2 simulatorN} [dir="both"]\n      subgraph cluster_key {\n        style=invis;\n        {\n          node [ width=0.5, height=0.3, label="", style="invis" ];\n          rank = same;\n          edge[ minlen = 2 ];\n          leg1 -> leg2[ label="Actual Message" ];\n          leg2 -> leg4[ style = dashed, label="Logical Message"];\n        }\n      }\n      sut -> leg2 [style=invis] ;\n      simulator2 -> leg2 [style=invis] ;\n    }\n',mdxType:"Graphviz"}),Object(i.b)("h2",{id:"simulators"},"Simulators"),Object(i.b)("p",null,"The simulators are an important part of the system and hold specific knowledge\nof messages and how the flow should happen. Each simulator represents a entity\nfrom the real scenario, and any of them can be replaced to be the SUT."),Object(i.b)("h3",{id:"service-provider-simulator"},"Service Provider Simulator"),Object(i.b)("p",null,"Acts as a mock service provider (SP) such as a utility company or supermarket\ncheckout to simulate their role in a transaction.",Object(i.b)("br",null)," This simulator can\nreceive and send messages through the GSMA Mobile Money API and has a connection\nto Mobile Money Operator 1."),Object(i.b)("h3",{id:"mobile-money-operator-1"},"Mobile Money Operator 1"),Object(i.b)("p",null,"Acts as a mock financial services provider (FSP) such as a Mobile Money Operator\nor Bank to simulate their role in a transaction.",Object(i.b)("br",null)," This simulator can\nperform two types of actions:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Receive messages through the GSMA Mobile Money API and map them to a Mojaloop\nAPI.",Object(i.b)("br",null)," This simulates a scenario when a Mobile Money Operator receives a\nrequest from a Service Provider to perform a transaction, acting as the payee.\nFor more details, see the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/uclist#mimp"}),"Merchant-Initiated Merchant Payment"),"\nuse case."),Object(i.b)("li",{parentName:"ul"},"Initiate messages directly through Mojaloop API.",Object(i.b)("br",null)," This simulates a\nscenario when an FSP starts a transaction to a Mojaloop network, acting as\nPayer. For more details, see the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/uclist#p2p"}),"P2P")," use case.")),Object(i.b)("h3",{id:"mobile-money-operator-2"},"Mobile Money Operator 2"),Object(i.b)("p",null,"Acts as a mock financial services provider (FSP) such as a Mobile Money Operator\nor Bank to simulate their role in a transaction.",Object(i.b)("br",null)," This simulator can\nperform one action:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Send and receive messages through the Mojaloop API.",Object(i.b)("br",null)," This simulates a\nscenario when an FSP receives a request to initiate a transaction\n(",Object(i.b)("inlineCode",{parentName:"li"},"transactionRequest"),") to a Mojaloop network, acting as Payer. For more\ndetails, see the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/uclist#mimp"}),"Merchant-Initiated Merchant Payment")," use case.\nThe same flow simulates a scenario when an FSP replies to a transaction from a\nMojaloop network, acting as Payee. For more details, see the\n",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/uclist#p2p"}),"P2P")," use case.")),Object(i.b)("h3",{id:"mojaloop"},"Mojaloop"),Object(i.b)("p",null,"Mojaloop is the interoperability hub, which links two or more FSPs and enables\ninteroperability. To ensure confidence in our test results, Mojaloop is not\nsimulated within the test platform, and we instead use a vanilla version of the\nreal ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://mojaloop.io/"}),"Mojaloop software"),"."),Object(i.b)("h2",{id:"system-under-test"},"System Under Test"),Object(i.b)("p",null,"A System Under Test (SUT) is the entity which is being tested. Currently the\ntest platform can handle two types of System Under Test: Service Providers and\nFinancial Service Providers.",Object(i.b)("br",null)," Once a SUT is selected in the platform, it\nreplaces the simulator representing the same entity for the duration of the\ntest, so we can ensure that the SUT is properly tested."))}h.isMDXComponent=!0},195:function(e,t){},196:function(e,t){},206:function(e,t){}}]);
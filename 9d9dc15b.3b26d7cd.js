(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{70:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return c}));var n=a(2),r=a(6),i=(a(0),a(85)),s={title:"Test Case Template",sidebar_label:"Creating a Test Case"},b={unversionedId:"testcases/creation",id:"testcases/creation",isDocsHomePage:!1,title:"Test Case Template",description:"The ITP test cases are defined using YAML files. Each file is composed of",source:"@site/docs/testcases/creation.md",slug:"/testcases/creation",permalink:"/testcases/creation",editUrl:"https://github.com/gsmainclusivetechlab/interop-docs/blob/develop/docs/testcases/creation.md",version:"current",sidebar_label:"Creating a Test Case",sidebar:"someSidebar",previous:{title:"ITP Test Cases",permalink:"/testcases/list"},next:{title:"Quick Guide for Tests",permalink:"/manual/quickguide"}},l=[{value:"Proposing New Test Cases",id:"proposing-new-test-cases",children:[]},{value:"Test Case Data",id:"test-case-data",children:[]},{value:"Test Step Data",id:"test-step-data",children:[{value:"Common Values",id:"common-values",children:[]},{value:"Assertions",id:"assertions",children:[]},{value:"Request and Response Templates",id:"request-and-response-templates",children:[]}]},{value:"Template variables",id:"template-variables",children:[{value:"Environment Variables",id:"environment-variables",children:[]},{value:"Twig Template Variables",id:"twig-template-variables",children:[]}]},{value:"Using the Test Case visual Editor",id:"using-the-test-case-visual-editor",children:[]}],o={rightToc:l};function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ITP test cases are defined using YAML files. Each file is composed of\nseveral fields that are interpreted by the platform to carry out tests and\nvalidations of the different use cases paths. This page describes the basic\nmodel of a YAML file for the test platform."),Object(i.b)("h2",{id:"proposing-new-test-cases"},"Proposing New Test Cases"),Object(i.b)("p",null,"Any party interested in using the Interoperability Test Platform can propose new\ntest cases using the template presented here. For this, it is important to\nfollow the creation guide ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/usecases/creation"}),"starting from a use case"),", to\nunderstand its application context, then determine which paths should/need to be\ntested. Then, it is possible to use the template shown below to create the test\ncases for each path. The creation of new test cases is based on the following\nroadmap:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Elaboration and understanding of the scenario you want to test;"),Object(i.b)("li",{parentName:"ol"},"Creation of a use case that can be implemented by ITP;"),Object(i.b)("li",{parentName:"ol"},"Description of the use case following the model available\n",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/usecases/creation"}),"here"),";"),Object(i.b)("li",{parentName:"ol"},"Definition of the paths that should be tested for the use case (happy and\nunhappy flows);"),Object(i.b)("li",{parentName:"ol"},"Preparation of each test case following the model below.")),Object(i.b)("h2",{id:"test-case-data"},"Test Case Data"),Object(i.b)("p",null,"The Test Case Data is the first part of the YAML file. It contains seven fields\nused as a header to specify particular characteristics related to the test case\nand the use case it belongs to. Below you can see a table with the fields used\nin the header and an example of the test case data in a YAML file."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"name")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The name of the Test Case that will be shown to users. Names do not need to be unique, so it is possible to have multiple Test Cases with the same name."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Authorized Transaction by Payer FSP")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"use_case")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The name of the Use Case that the Use Case is related to. This should be identical for all Test Cases sharing a Use Case."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"behavior")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),'Defines the type of the Test Case, i.e. "Happy flow" (',Object(i.b)("inlineCode",{parentName:"td"},"positive"),') and "Unhappy flow" (',Object(i.b)("inlineCode",{parentName:"td"},"negative"),")."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"positive")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"negative"))))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"description")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A description of the Test Case. It is useful to include some business background of what we are trying to achieve in this case."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The Service Provider wants to test if he is capable of receiving a transaction from a different wallet...")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"precondition")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"An additional area describing specific values that should be used to execute a Test Case. This may include directions for using test case ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"triggers"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"components")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of components involved in the that the Test Case. Some Test Cases involve MMOs only (P2P transfer) or contain some specific errors that can only be received by SUT and not handled by it."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,"Service Provider"),Object(i.b)("li",null,"Mobile Money Operator 1"),Object(i.b)("li",null,"Mobile Money Operator 2"),Object(i.b)("li",null,"Any combination of the above")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"test_steps")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Contains details of the steps involved in the test case."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("h4",{id:"example-of-test-case-data-in-a-yaml-file"},"Example of test case data in a YAML file"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'name: Authorized Transaction by Payer FSP\nuse_case: Merchant-Initiated Merchant Payment\nbehavior: positive\ndescription: |\n  The Service Provider wants to test if he is capable of receiving a\n  transaction from a different wallet provider than the one with which he has\n  an account. In this case, we simulate the scenario when the Payer would\n  like to buy goods or services from a Service Provider (the Payee), but each\n  of them uses different wallet providers. This flow shows the necessary\n  steps for this transaction simulating an approved transaction.\nprecondition: |\n  - Service Provider has GSMA Mobile Money API Implemented.\n  - Service Provider is capable of handling async calls.\n  - Payee and Payer MMOs exist in Mojaloop as Participants.\n  - Payee and Payer exist in Mojaloop as Parties.\n  - Amount should be the value "1001".\n  - Debit party should be identified by account identifier "msisdn" with the value "+33555123456".\n  - Credit party should be identified by account identifier "msisdn" with the value "+33555789123".\ncomponents:\n  - Service Provider\n  - Mobile Money Operator 1\n  - Mobile Money Operator 2\ntest_steps:\n  # ...\n')),Object(i.b)("h2",{id:"test-step-data"},"Test Step Data"),Object(i.b)("p",null,"The second part of the test case file is called Test Step Data. Each step\nrepresents an HTTP request made as part of the test, and is defined by a series\nof basic values, in addition to detailed parameters such as ",Object(i.b)("em",{parentName:"p"},"assertions"),", and\n",Object(i.b)("em",{parentName:"p"},"request and response templates"),"."),Object(i.b)("h3",{id:"common-values"},"Common Values"),Object(i.b)("p",null,"These common values are present in every step of the test case."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Example"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"api_spec")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The API spec to perform schema validation. Should be a Specification name from the database."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,"Mojaloop v1.0"),Object(i.b)("li",null,"MM v1.1.2"),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"method")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The request method that will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match a message"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"POST")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"PUT")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"pattern")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A regular expression will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match a message")," using the request path."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"^transactionRequests\\$")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"^quotes/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\\$")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"path")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The path used to match a request against the API spec. Will also be shown on Flow Diagrams and on Test Run steps that were not executed."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"/quotes/{ID}")),Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"/transactionRequests")),Object(i.b)("li",null,"etc.")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"source")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The sender of the request. Should be a Component name from the database. Will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match a message")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,"Service Provider"),Object(i.b)("li",null,"Mobile Money Operator 1"),Object(i.b)("li",null,"Mojaloop "),Object(i.b)("li",null,"Mobile Money Operator 2")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"target")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The recipient of the request. Should be a Component name from the database. Will be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match a message")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,"Service Provider"),Object(i.b)("li",null,"Mobile Money Operator 1"),Object(i.b)("li",null,"Mojaloop "),Object(i.b)("li",null,"Mobile Money Operator 2")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"trigger")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The trigger value(s) that should be used to ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/architecture/matching"}),"match a message"),"."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("inlineCode",{parentName:"td"},"{amount: '99'}")),Object(i.b)("li",null,"etc.")))))),Object(i.b)("h4",{id:"example-of-global-values-in-a-yaml-file"},"Example of Global Values in a YAML file"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'- path: /quotes/{ID}\n  pattern: "^quotes/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"\n  method: PUT\n  source: Mojaloop\n  target: Mobile Money Operator 1\n  api_spec: Mojaloop v1.0\n  trigger:\n    transferAmount:\n      amount: "99"\n')),Object(i.b)("h3",{id:"assertions"},"Assertions"),Object(i.b)("p",null,"Assertions are used to validate that certain business conditions are true, in a\nmore powerful way than is possible using API schema validation. Where API schema\nvalidation can only validate the ",Object(i.b)("em",{parentName:"p"},"structure")," of a message, assertions can be\nused to validate the ",Object(i.b)("em",{parentName:"p"},"content"),". Assertions can be performed for any value in the\nheader or body of the request or response. In a response, the ",Object(i.b)("inlineCode",{parentName:"p"},"status")," field may\nalso be used for assertions."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"test_request_scripts")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of assertions that will be performed for the request.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"test_response_scripts")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of assertions that will be performed for the HTTP response.")))),Object(i.b)("p",null,"Each request/response may have a number of assertions, and each assertion is\ndefined by a ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and a list of Laravel validation ",Object(i.b)("inlineCode",{parentName:"p"},"rules"),". The key for each\nrule is a path to a field using 'dot' syntax within the request/response object.\nFor more information on the syntax of these rules, visit the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://laravel.com/docs/7.x/validation#available-validataion-rules"}),"Laravel documentation site"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'test_steps:\n  - #...\n    test_request_scripts:\n      - name: Amounts and currencies are specified correctly\n        rules:\n          body.transferAmount.amount: "required|in:99"\n          body.transferAmount.currency: "required|regex:/^[A-Z]{3}/"\n          body.payeeReceiveAmount.amount: "required|in:100"\n          body.payeeReceiveAmount.currency: "required|regex:/^[A-Z]{3}/"\n          body.payeeFspCommission.amount: "required|in:1"\n          body.payeeFspCommission.currency: "required|regex:/^[A-Z]{3}/"\n      - name: Callback URL is specified\n        rules:\n          headers.x-callback-url.*: "required|url"\n    test_response_scripts:\n      - name: Transaction was successfully accepted\n        rules:\n          status: "required|in:200"\n')),Object(i.b)("h3",{id:"request-and-response-templates"},"Request and Response Templates"),Object(i.b)("p",null,"Each test step is also defined by a template request and response. This is used\nby the platform to generate simulated traffic for the components which are not\nSUTs in a session. Additionally, the templates also provide guidance for test\nplatform users, to outline which data needs to be sent, or can be expected from\nother components during test execution."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"method"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The HTTP method used to make the request.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"uri"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A path or URI for used to make the request.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"headers"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A list of headers to include in the request or response.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"body"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A JSON payload for the request or response.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"status"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The status code that will be used for a response.")))),Object(i.b)("h4",{id:"example-of-a-request-and-response"},"Example of a request and response"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'test_steps:\n  - #...\n    request:\n      method: POST\n      uri: /transactions\n      headers:\n        accept: "application/json"\n        content-type: "application/json"\n        x-callback-url: "https://example.com/example"\n        x-date: "2000-01-01T00:00:00.000Z"\n      body:\n        amount: "1005"\n        currency: "USD"\n        type: "merchantpay"\n        debitParty:\n          - key: "msisdn"\n            value: "+33555123456"\n        creditParty:\n          - key: "msisdn"\n            value: "+33555789123"\n    response:\n      status: 400\n      headers:\n        x-date: "2000-01-01T00:00:00.000Z"\n        content-type: "application/json"\n')),Object(i.b)("h2",{id:"template-variables"},"Template variables"),Object(i.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Using variables in test cases is under active development, and is subject to\nchange at very short notice."))),Object(i.b)("p",null,"It is often useful to include dynamic data within a test case. Some examples of\nthis are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To send a simulated request with a freshly generated UUID on each test run"),Object(i.b)("li",{parentName:"ul"},"To include a field in a HTTP response which was dynamically provided in the\npreceding request"),Object(i.b)("li",{parentName:"ul"},"To customise the test execution for a particular environment (e.g. to include\nan authorization token belonging to the owner of the session)")),Object(i.b)("p",null,"Template variables are a way to achieve the above by injecting values inside any\nstring inside the ",Object(i.b)("inlineCode",{parentName:"p"},"test_steps[*].request")," and ",Object(i.b)("inlineCode",{parentName:"p"},"test_steps[*].response"),' objects.\nCurrently, there are two types of template variables although future releases of\nthe interoperability test platform will unify both types under "Twig Template\nVariables".'),Object(i.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(i.b)("p",null,"Environment variables are primarily used to inject data which is unique to a\nparticular session, such as the URLs of the various test components (useful for\nincluding callback URLs in a request header, for example). The syntax for using\nan environment variable is ",Object(i.b)("inlineCode",{parentName:"p"},"${ ENVIRONMENT_VARIABLE_NAME }"),". The variables\navailable for use are:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"SP_BASE_URI")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The url specified during session creation for the service provider component. If the component is simulated, then the simulator URL will be provided instead.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"MMO1_BASE_URI")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The url specified during session creation for the Mobile Money Operator 1 component. If the component is simulated, then the simulator URL will be provided instead.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"MOJALOOP_BASE_URI")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The url specified during session creation for the Mojaloop component. If the component is simulated, then the simulator URL will be provided instead.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"MMO2_BASE_URI")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The url specified during session creation for the Mobile Money Operator 2 component. If the component is simulated, then the simulator URL will be provided instead.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"CURRENT_TIMESTAMP_ISO8601")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The current time, formatted as an ISO8601 timestamp.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"CURRENT_TIMESTAMP_ISO8601_ZULU")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The current time, formatted as an ISO8601 Zulu timestamp.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"CURRENT_TIMESTAMP_RFC2822")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The current time, formatted as an RFC2822 timestamp.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"CURRENT_TIMESTAMP_RFC7231")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The current time, formatted as an RFC7231 timestamp.")))),Object(i.b)("p",null,"Additionally, any variable that the user provides in the session environment may\nbe used. If a test case relies on environment variables being provided in this\nway, it should be documented in the test case ",Object(i.b)("inlineCode",{parentName:"p"},"preconditions")," section."),Object(i.b)("h3",{id:"twig-template-variables"},"Twig Template Variables"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://twig.symfony.com/"}),"Twig")," is a powerful templating language which allows\nsandboxed execution of arbitrary logic within the test case context. This allows\nus to create templates with highly dynamic data - such as including data from\nprevious messages, or combining multiple sources of data using arithmetic. The\nsyntax for Twig template variables is ",Object(i.b)("inlineCode",{parentName:"p"},"{{ twig_expression }}"),"."),Object(i.b)("p",null,"A full description of the twig templating language is beyond the scope of this\ndocumentation, although a detailed reference is available on the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://twig.symfony.com/doc/3.x/"}),"Twig website"),"."),Object(i.b)("p",null,"Within a test case, the following context variables are available for use (in\naddition to all of Twig's built-in functions and variables):"),Object(i.b)("h4",{id:"steps"},Object(i.b)("inlineCode",{parentName:"h4"},"steps")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," variable contains a reference to all previously executed test steps\nin the test case. In the following example, we use ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," in combination with\ntwig's ability to perform arithmetic to simulate a constant fee of 1 USD being\napplied to the amount requested in a previous step:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'body:\n  transferAmount:\n    currency: "USD"\n    amount: "{{ steps.7.request.body.amount.amount + 1 }}"\n')),Object(i.b)("h4",{id:"uuidv4"},Object(i.b)("inlineCode",{parentName:"h4"},"uuidv4")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"uuidv4()")," function can be used to generate a unique UUID for a request. It\ncan be used in conjunction with ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," as described above to correlate a UUID\nacross several steps:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'request:\n  # ...\n  body:\n    serverCorrelationId: "{{ uuidv4() }}"\nresponse:\n  # ...\n  body:\n    requestId: "{{ steps.4.request.body.serverCorrelationId }}"\n')),Object(i.b)("h4",{id:"now"},Object(i.b)("inlineCode",{parentName:"h4"},'"now"')),Object(i.b)("p",null,"Parsing the string ",Object(i.b)("inlineCode",{parentName:"p"},'"now"')," is a builtin feature of Twig, but it is documented\nhere separately as a useful tool in building test cases. Using Twig filters, you\ncan avoid the use of the static environment variables described above for\nformatting dates, and instead format a date using any format string:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'headers:\n  X-Date: \'{{ "now" | date("F j, Y, g:i a") }}\'\n')),Object(i.b)("h2",{id:"using-the-test-case-visual-editor"},"Using the Test Case visual Editor"),Object(i.b)("p",null,"Although test cases are often quicker to produce using the YAML syntax, it is\nalso possible for users with the Test Case Creator role to edit test cases\ndirectly through the web interface."))}c.isMDXComponent=!0},85:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),c=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},d=function(e){var t=c(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,u=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return a?r.a.createElement(u,b(b({ref:t},o),{},{components:a})):r.a.createElement(u,b({ref:t},o))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:n,s[1]=b;for(var o=2;o<i;o++)s[o]=a[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
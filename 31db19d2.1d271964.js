(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var s=n(2),o=n(9),r=(n(0),n(184)),i={id:"session",title:"Test Sessions",sidebar_label:"Test Sessions"},a={id:"session",title:"Test Sessions",description:"ITP Sessions",source:"@site/docs/session.md",permalink:"/interop-docs/session",editUrl:"https://github.com/gsmainclusivetechlab/interop-docs/docs/session.md",sidebar_label:"Test Sessions",sidebar:"someSidebar",previous:{title:"Test Case Template",permalink:"/interop-docs/tctemplate"},next:{title:"Running Tests",permalink:"/interop-docs/tests"}},c=[{value:"ITP Sessions",id:"itp-sessions",children:[]},{value:"Session Information",id:"session-information",children:[{value:"Step 01: SUT Selection",id:"step-01-sut-selection",children:[]},{value:"Step 02: Session Info",id:"step-02-session-info",children:[]},{value:"Configure Components",id:"configure-components",children:[]}]},{value:"Session Creation",id:"session-creation",children:[]}],p={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"itp-sessions"},"ITP Sessions"),Object(r.b)("p",null,"The execution of tests in the Interoperability Test Platform (ITP) is performed through the creation of sessions. Sessions are a group of use cases and test cases with a validation purpose and possibly a common scope. Through the sessions it is possible to modularize the groups of tests by affinity, as the user wishes and taking into account the selection of the System Under Test (SUT). During the creation of a session, the user sets the address of the SUT, defines information related to the session and selects the test cases to be included. After creation, it is possible to run tests by changing parameters for each test case. The created session is available on the home screen of the ITP (as shown in the picture below), allowing the user to consult previously run tests, delete and run new tests."),Object(r.b)("p",null,"Home screen with the user sessions:"),Object(r.b)("p",null,Object(r.b)("img",Object(s.a)({parentName:"p"},{src:"/interop-docs/img/itphome.png",alt:"ITP Home"}))),Object(r.b)("h2",{id:"session-information"},"Session Information"),Object(r.b)("p",null,"During the creation of a session the user must perform three main steps. In each step the user must insert information and parameters related to the session to be created. Following, each step and the form required fields are described."),Object(r.b)("h3",{id:"step-01-sut-selection"},"Step 01: SUT Selection"),Object(r.b)("p",null,"In this step, the user must enter the information about the SUT that will be tested by the platform. The form consists of two fields: type of ",Object(r.b)("strong",{parentName:"p"},"SUT")," and ",Object(r.b)("strong",{parentName:"p"},"URL"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"SUT:")," The user must choose the type of SUT to be tested, being able to choose between Service Provider, Mobile Money Operator 1 and Mobile Money Operator 2."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"URL:")," The user inserts the link of the SUT that he wants to test. In this sense, the user can choose to test with his own SUT",Object(r.b)("sup",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"#instancedsut"}),"1"))," or with a SUT simulated by the platform",Object(r.b)("sup",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"#simulatesut"}),"2")),"."),Object(r.b)("p",null,"Step 01 - Selecting the system under test:\n",Object(r.b)("img",Object(s.a)({parentName:"p"},{src:"/interop-docs/img/itpselectsut.png",alt:"ITP Session SUT Selection"}))),Object(r.b)("h3",{id:"step-02-session-info"},"Step 02: Session Info"),Object(r.b)("p",null,"In this step the user must provide information for the definition and creation of the session using 3 main fields, which are:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Name:")," Alias used to name the session"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description:")," Information described by the user to help understand the purpose of the section created."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Use Cases:")," In this part, considering the type of SUT chosen, all use cases and their respective test cases are shown. The user can then select the test cases to be used by the session under creation. It is worth mentioning that the test cases for each use case are divided into happy flow and unhappy flow."),Object(r.b)("p",null,"Step 02 - Session information form:\n",Object(r.b)("img",Object(s.a)({parentName:"p"},{src:"/interop-docs/img/itpsessioninfo.png",alt:"ITP Session Info"}))),Object(r.b)("h3",{id:"configure-components"},"Configure Components"),Object(r.b)("p",null,"In this step, the components other than the SUT, which must be present in the execution of the tests, are automatically filled with addresses simulated by the platform. During the execution of tests for a session, these addresses remain at the user's view so that they can be copied and used in the execution of tests using an API testing tool, such as Postman",Object(r.b)("sup",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"#postman"}),"3")),", for example."),Object(r.b)("p",null,"Step 03 - Information about the configure components:\n",Object(r.b)("img",Object(s.a)({parentName:"p"},{src:"/interop-docs/img/itpsessionconfigure.png",alt:"ITP Session Configure Compponents"}))),Object(r.b)("h2",{id:"session-creation"},"Session Creation"),Object(r.b)("p",null,"Para criar uma sess\xe3o, clique no bot\xe3o New Session no canto superior direito da tela e siga os passos a seguir:"),Object(r.b)("a",{name:"instancedsut"},"1"),": To understand about how to run your ouwn SUT read more in the installation section.",Object(r.b)("a",{name:"simulatedsut"},"1"),": INSERT SOMETHING HERE.",Object(r.b)("a",{name:"postman"},"1"),": https://www.postman.com/")}u.isMDXComponent=!0},184:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var s=n(0),o=n.n(s);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),u=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a({},t,{},e)),n},l=function(e){var t=u(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=Object(s.forwardRef)((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(n),h=s,d=l["".concat(i,".").concat(h)]||l[h]||b[h]||r;return n?o.a.createElement(d,a({ref:t},p,{components:n})):o.a.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=h;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);
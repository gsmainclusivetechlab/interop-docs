"use strict";(self.webpackChunkinterop_docs=self.webpackChunkinterop_docs||[]).push([[631],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2921:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={title:"Secure Connections",sidebar_label:"Secure Connections"},l=void 0,c={unversionedId:"manual/security",id:"manual/security",title:"Secure Connections",description:"The Interoperability Test Platform provides several ways to ensure that your",source:"@site/docs/manual/security.md",sourceDirName:"manual",slug:"/manual/security",permalink:"/manual/security",draft:!1,tags:[],version:"current",frontMatter:{title:"Secure Connections",sidebar_label:"Secure Connections"},sidebar:"someSidebar",previous:{title:"Test Results",permalink:"/manual/results"},next:{title:"User Groups",permalink:"/manual/groups"}},u={},p=[{value:"Encrypted Connections with mTLS",id:"encrypted-connections-with-mtls",level:2},{value:"Proxy \u2192 Server",id:"proxy--server",level:3},{value:"Debugging",id:"debugging",level:4},{value:"Client \u2192 Proxy",id:"client--proxy",level:3},{value:"Debugging",id:"debugging-1",level:4},{value:"JSON Web Signatures (JWS)",id:"json-web-signatures-jws",level:2}],d={toc:p},h="wrapper";function f(e){var t=e.components,s=(0,r.Z)(e,o);return(0,a.kt)(h,(0,i.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Interoperability Test Platform provides several ways to ensure that your\ntest components are behaving in a secure way."),(0,a.kt)("h2",{id:"encrypted-connections-with-mtls"},"Encrypted Connections with mTLS"),(0,a.kt)("p",null,"Normally, two components of a system may communicate via mutual TLS (mTLS),\nwhere both the client and the server authenticate themselves using public key\ncryptography. Since the test platform is a proxy in between these two\ncomponents, we must now consider two connections instead of one:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The connection between a client and the proxy (acting on behalf of a server)"),(0,a.kt)("li",{parentName:"ol"},"The connection between the proxy (acting as a client) and the server")),(0,a.kt)("p",null,"In many cases where mTLS is used, these two connections may additionally operate\nin the reverse direction (i.e. the client may also act as a server, and vice\nversa)."),(0,a.kt)("p",null,"Note that in the code samples below, ",(0,a.kt)("inlineCode",{parentName:"p"},"openssl")," is used. Similar operations can\nbe performed with any appropriate tool."),(0,a.kt)("h3",{id:"proxy--server"},"Proxy \u2192 Server"),(0,a.kt)("p",null,"In this leg, ITP is acting as an application client, and your SUT is the\napplication server. Although this is the second leg of the connection, it needs\nto be configured first, as part of the session creation wizard:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Encrypted Server Configuration",src:n(7777).Z,width:"1500",height:"786"})),(0,a.kt)("p",null,"It is assumed that the application server is already configured with a server\nkey and server certificate, signed by a private certificate authority (CA). In\nthe code samples below, ",(0,a.kt)("inlineCode",{parentName:"p"},"ca.crt")," refers the the public certificate of the\nprivate CA, and ",(0,a.kt)("inlineCode",{parentName:"p"},"ca.key")," refers to its private key."),(0,a.kt)("p",null,"Firstly, the CA certificate (",(0,a.kt)("inlineCode",{parentName:"p"},"ca.crt"),") can be uploaded directly. This will be\nused by ITP to verify that your server is authenticating itself correctly with a\nvalid server certificate."),(0,a.kt)("p",null,"To authenticate itself to your server, ITP also needs to present a client\ncertificate signed by your private CA. In order to do this, a certificate\nsigning request (CSR) can be generated as part of the session creation wizard.\nYou can download this CSR (",(0,a.kt)("inlineCode",{parentName:"p"},"client.csr"),"), and generate a client certificate\n(",(0,a.kt)("inlineCode",{parentName:"p"},"client.crt"),") using the CA credentials:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -days 365 \\\n    -in client.csr -out client.crt \\\n    -CA ca.crt -CAkey ca.key -CAcreateserial\n")),(0,a.kt)("p",null,"You can now upload the client certificate to the platform and proceed to the\nnext step of session creation."),(0,a.kt)("p",null,"Instead of uploading these certificates every time a new session is created, it\nis also possible to upload the certificates to a ",(0,a.kt)("a",{parentName:"p",href:"./groups"},"user group"),". By\ndoing this, a dropdown will appear allowing you to select preconfigured\ncertificates directly."),(0,a.kt)("h4",{id:"debugging"},"Debugging"),(0,a.kt)("p",null,'It is possible to bypass this leg of the encrypted connection by disabling the\n"use encryption" setting for the component. When you do this, the URLs which are\ndisplayed will change to use the\n',(0,a.kt)("a",{parentName:"p",href:"../architecture/connections#insecure-urls"},'"insecure"')," version of the URL.\nHowever ITP will continue to present a secure mTLS server, so it will be\npossible for the Client \u2192 Proxy leg to continue to use the original secure url.\nA test failure will be logged on the test results, to indicate that an insecure\nconnection was used when a secure one was expected."),(0,a.kt)("h3",{id:"client--proxy"},"Client \u2192 Proxy"),(0,a.kt)("p",null,"In this direction, ITP is acting as an application server. ITP will present a\nserver certificate (signed by its own private certificate authority), and will\nrequire that the client presents a client certificate signed by the same private\ncertificate authority (CA). To establish an encrypted connection, therefore, you\nmust obtain a signed client certificate when you create a session."),(0,a.kt)("p",null,"To do this, the client must first have a private key. If you do not already have\na private key, one can be generated with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out client.key 2048\n")),(0,a.kt)("p",null,"Once you have a private key, you will need to generate a CSR (",(0,a.kt)("inlineCode",{parentName:"p"},"client.csr"),").\nThis contains the information required for ITP to generate a signed certificate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -new -key client.key -out client.csr\n")),(0,a.kt)("p",null,'Within the test session, you can click the "Download Certificates" button to\nobtain this signed certificate. After uploading ',(0,a.kt)("inlineCode",{parentName:"p"},"client.csr")," in the window that\nappears, you will be able to download a zip file containing two certificates."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Test Session URL Configuration",src:n(3682).Z,width:"2158",height:"602"})),(0,a.kt)("p",null,"One certificate will be called ",(0,a.kt)("inlineCode",{parentName:"p"},"client.crt"),", which is the certificate your\nclient should present when sending a request. The other certificate is called\n",(0,a.kt)("inlineCode",{parentName:"p"},"RootCA.crt"),", and your client should use this certificate as a CA certificate to\nvalidate the authenticity of ITP's server certificate."),(0,a.kt)("p",null,"These two certificates will remain constant across all sessions (as long as your\nclient key does not change), so you should not need to reconfigure these\ncertificates at any stage."),(0,a.kt)("h4",{id:"debugging-1"},"Debugging"),(0,a.kt)("p",null,'It is possible to bypass the encrypted connection for this step by using the\n"insecure" version of the ',(0,a.kt)("a",{parentName:"p",href:"../architecture/connections#insecure-urls"},"URL"),". When\nyou use the insecure version of the URL, no mTLS checking is performed and a\ndirect HTTP connection can be used. ITP will continue to use an mTLS connection\nwhen for the Proxy \u2192 Server leg, so the server will not need to be reconfigured.\nA test failure will be logged on the test results, to indicate that an insecure\nconnection was used when a secure one was expected."),(0,a.kt)("h2",{id:"json-web-signatures-jws"},"JSON Web Signatures (JWS)"),(0,a.kt)("p",null,"Test cases can be defined with configuration to support\n",(0,a.kt)("a",{parentName:"p",href:"../testcases/creating-tc#jws-signatures"},"JWS signatures"),". This configuration\nreads values from a session's\n",(0,a.kt)("a",{parentName:"p",href:"./session#step-3-configure-components"},"environment"),". As a result, selecting a\ntest case with a JWS configuration will add entries to a session's file\nenvironments:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"JWS File Environments",src:n(2649).Z,width:"1160",height:"426"})),(0,a.kt)("p",null,"Although the names of these variables may differ, there will generally always be\ntwo variables for each component which uses JWS signatures - a private key and a\npublic key. As with all environment variables, it is possible to provide these\nthrough a ",(0,a.kt)("a",{parentName:"p",href:"./groups"},"user group")," environment instead of entering them separately\nfor each new test session."),(0,a.kt)("p",null,"The public key should always be provided. ITP will use this to validate the JWS\nsignature of the request when it is made. If the signature is malformed, a test\nfailure will be logged."),(0,a.kt)("p",null,"The private key only needs to be provided if the component is being simulated by\nITP. In this case, ITP needs to generate the signature itself, and it will use\nthe given private key to do so. It is important that the private key matches the\npublic key, otherwise the signature will be malformed when it is validated."),(0,a.kt)("p",null,"If you need to generate a new public/private key pair, you can do so using\n",(0,a.kt)("inlineCode",{parentName:"p"},"openssl")," or many other tools:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out private.key 2048\nopenssl rsa -in private.key -out public.key -pubout -outform PEM\n")),(0,a.kt)("p",null,"If you already have a pair of keys, and you wish to verify that they correspond\nto one another, you can also do this with ",(0,a.kt)("inlineCode",{parentName:"p"},"openssl"),". The output of the following\ntwo commands will be identical if the keys are a matching pair."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rsa -in private.key -noout -modulus | openssl md5\nopenssl rsa -pubin -in public.key -noout -modulus | openssl md5\n")))}f.isMDXComponent=!0},3682:function(e,t,n){t.Z=n.p+"assets/images/encrypted-client-4151041d538535257d77fecde5061ae8.png"},7777:function(e,t,n){t.Z=n.p+"assets/images/encrypted-server-d280545d247086b2eb15ff2172513e18.png"},2649:function(e,t,n){t.Z=n.p+"assets/images/jws-environments-d7276a90a9d07624bdc283987017122b.png"}}]);
"use strict";(self.webpackChunkinterop_docs=self.webpackChunkinterop_docs||[]).push([[4],{487:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return a}});var r=n(5893),o=n(1151);const s={title:"Writing New Code"},i=void 0,c={id:"contributors-guide/new-code",title:"Writing New Code",description:"To ensure that your contributions are merged in effectively, and that no one is",source:"@site/docs/contributors-guide/new-code.md",sourceDirName:"contributors-guide",slug:"/contributors-guide/new-code",permalink:"/contributors-guide/new-code",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Writing New Code"},sidebar:"someSidebar",previous:{title:"Development Tools",permalink:"/contributors-guide/tools"},next:{title:"Reporting bugs",permalink:"/contributors-guide/bugs"}},l={},a=[{value:"1. Fork",id:"1-fork",level:3},{value:"Creating a Branch",id:"creating-a-branch",level:3},{value:"Prepare for Merging",id:"prepare-for-merging",level:3},{value:"Code Style",id:"code-style",level:3},{value:"Testing",id:"testing",level:3},{value:"Git History",id:"git-history",level:3},{value:"Merge into Upstream Repository",id:"merge-into-upstream-repository",level:3}];function d(e){const t={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"To ensure that your contributions are merged in effectively, and that no one is\nduplicating efforts working on the same issue, please follow the steps below\nwhen you would like to write new code for the ITP."}),"\n",(0,r.jsx)(t.h3,{id:"1-fork",children:"1. Fork"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://help.github.com/articles/fork-a-repo/",children:"Fork"})," the relevant repository\ninto your own personal space. It's worth ensuring that you keep the ",(0,r.jsx)(t.code,{children:"master"})," and\n",(0,r.jsx)(t.code,{children:"develop"})," branches in sync so that you don't miss out on upstream changes while\nyou're working."]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:'Click the "Fork" button on the top right of the Github repository page'}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Clone your forked repository onto your development machine:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/<your_username>/interop-test-platform.git\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Add a new upstream remote to pull in later updates"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git remote add upstream https://github.com/gsmainclusivetechlab/interop-test-platform.git\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["To sync to your current copy of ",(0,r.jsx)(t.code,{children:"develop"}),", run"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git pull upstream develop\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This will merge any changes from our repository into your forked one. You can\ndo the same for the ",(0,r.jsx)(t.code,{children:"master"})," branch."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Push your code changes back to your own repository:\n",(0,r.jsx)(t.code,{children:"git push origin <current_branch>"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"creating-a-branch",children:"Creating a Branch"}),"\n",(0,r.jsxs)(t.p,{children:["Create a new branch from the ",(0,r.jsx)(t.code,{children:"develop"})," branch like so:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Create and checkout the branch:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git checkout develop\ngit checkout -b feature/<issueNumber><issueDescription>\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Push the branch to your remote:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git push origin feature/<issueNumber><issueDescription>\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Instead of ",(0,r.jsx)(t.code,{children:"feature"})," you may use other branch types, such as ",(0,r.jsx)(t.code,{children:"bugfix"})," or\n",(0,r.jsx)(t.code,{children:"release"}),". The issue number refers to the issue in Github. If there is no\ncorresponding issue yet, please create one before starting work! The issue\ndescription is optional, but is very useful to recognise the right branch on\nyour computer!"]}),"\n",(0,r.jsx)(t.h3,{id:"prepare-for-merging",children:"Prepare for Merging"}),"\n",(0,r.jsxs)(t.p,{children:["Once you have completed work on your new code, you need to make sure that the\ncode is of a high enough quality to be accepted into the main project. There are\ntwo easy ways to ensure this - check code style with ",(0,r.jsx)(t.code,{children:"prettier"})," and test code\nquality with unit tests."]}),"\n",(0,r.jsx)(t.h3,{id:"code-style",children:"Code Style"}),"\n",(0,r.jsxs)(t.p,{children:["Code style across all repositories is simply enforced using\n",(0,r.jsx)(t.a,{href:"https://prettier.io/",children:(0,r.jsx)(t.code,{children:"prettier"})}),". To detect and fix any styling errors, run\n",(0,r.jsx)(t.code,{children:"npx prettier . --write"}),". In most (but not yet all) of the project repositories,\na ",(0,r.jsx)(t.code,{children:".prettierrc"})," file has been set up to ensure that the correct code style is\napplied (adding this ",(0,r.jsx)(t.code,{children:".prettierrc"})," file across other projects would be a\n",(0,r.jsx)(t.a,{href:"https://github.com/orgs/gsmainclusivetechlab/projects/1?card_filter_query=label%3A%22good+first+issue%22",children:"good first issue"}),"!).\nSimilarly, a top-level ",(0,r.jsx)(t.code,{children:"package.json"})," file has been added to most project\nrepositories, allowing you to lint all project files by simply running\n",(0,r.jsx)(t.code,{children:"yarn lint"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(t.p,{children:"Our different projects use different technologies, and therefore are tested in\ndifferent ways. All are set up with some kind of test suite, however. If you are\nadding new functionality, please add some tests to demonstrate that the\nfunctionality is working as intended. If you are fixing a bug, please add a test\nwhich fails when the bug is present, and passes when your fix is applied."}),"\n",(0,r.jsx)(t.p,{children:"All projects will run the test suite automatically as part of the continuous\nintegration process which is triggered when a pull request is created. If the\ntest suite does not pass, the pull request will not be accepted."}),"\n",(0,r.jsx)(t.h3,{id:"git-history",children:"Git History"}),"\n",(0,r.jsxs)(t.p,{children:["It is very useful for the project to ensure a clean commit history. This allows\nfuture developers to understand the context of every change. To ensure this, we\nwill only merge pull requests which are up-to-date with the ",(0,r.jsx)(t.code,{children:"develop"})," branch.\nYou should also try to ensure that your pull request is focussed, and aim for\none succinct commit. For example, squash commits like ",(0,r.jsx)(t.code,{children:"'oops, fix typo/bug'"}),"\ninto the parent commit. You can use ",(0,r.jsx)(t.code,{children:"git rebase -i"})," to clean up the commit\nhistory before submitting the pull request."]}),"\n",(0,r.jsxs)(t.p,{children:["Include the message ",(0,r.jsx)(t.code,{children:"Closes gsmainclusivetechlab/<project>#123"})," (replacing ",(0,r.jsx)(t.code,{children:"123"}),"\nwith the issue number for the feature you are working on) inside your commit\nmessage so that Github links the issue and tracks progress correctly. You can do\nthe same inside the pull request description, to ensure that your work doesn't\ngo un-noticed!"]}),"\n",(0,r.jsx)(t.h3,{id:"merge-into-upstream-repository",children:"Merge into Upstream Repository"}),"\n",(0,r.jsxs)(t.p,{children:["Once your code has been linted and tested, you are ready to merge your code into\nthe main repository. To do this, create a pull request from your branch (on your\nforked repository) into the ",(0,r.jsx)(t.code,{children:"develop"})," branch of the upstream repository. You can\nrequest a review from a member of the maintenance team to ensure the PR is not\nmissed. If the change is acceptable, and all code quality tests pass, then the\npull request will be merged."]}),"\n",(0,r.jsx)(t.p,{children:'If you\'d like to preview your pull request before it\'s complete, feel free to\ncreate it early and mark it as a "draft" until you\'ve finished. It will not be\nreviewed until the "WIP" marker is removed.'})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:function(e,t,n){n.d(t,{Z:function(){return c},a:function(){return i}});var r=n(7294);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);